name: 'Builds: Publish Release'

on:
  release:
    types: [ published ]

permissions:
  id-token: write
  pages: write
  contents: write

jobs:
  builds-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Place tag in environment
        run: |
          SOURCE_TAG="${GITHUB_REF:10}"
          echo "SOURCE_TAG=${SOURCE_TAG}" >> $GITHUB_ENV
          echo "BUILD_NAME=${SOURCE_TAG#v}" >> $GITHUB_ENV

          BUILD_NUMBER="$(git ls-remote origin | grep -c 'refs/tags/v')"
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Write tag version to pubspec.yaml
        run: |
          sed -i "s/^version:.*/version: ${BUILD_NAME}+${BUILD_NUMBER}/" pubspec.yaml

      - name: Parse release notes
        env:
          RELEASE_BODY: ${{ github.event.release.body }}
        run: |
          shopt -s extglob
          cargo install markdown-extract

          echo "Parsing release body:"
          echo "${RELEASE_BODY}"

          ## What's New
          RELEASE_NEWS=$(markdown-extract --no-print-matched-heading "What's New" <(echo "${RELEASE_BODY}") || echo '')
          RELEASE_NEWS="${RELEASE_NEWS##+([[:space:]])}"
          if [[ "${RELEASE_NEWS}" == "Error: No matches." ]]; then
              RELEASE_NEWS=""
          fi

          echo 'RELEASE_NEWS<<END_OF_RELEASE_MARKDOWN' >> $GITHUB_ENV
          echo "${RELEASE_NEWS}" >> $GITHUB_ENV
          echo 'END_OF_RELEASE_MARKDOWN' >> $GITHUB_ENV

          echo -e "News:\n${RELEASE_NEWS}\n"


          ## Notices
          RELEASE_NOTICES=$(markdown-extract --no-print-matched-heading "Notices" <(echo "${RELEASE_BODY}") || echo '')
          RELEASE_NOTICES="${RELEASE_NOTICES##+([[:space:]])}"
          if [[ "${RELEASE_NOTICES}" == "Error: No matches." ]]; then
              RELEASE_NOTICES=""
          fi

          echo 'RELEASE_NOTICES<<END_OF_RELEASE_MARKDOWN' >> $GITHUB_ENV
          echo "${RELEASE_NOTICES}" >> $GITHUB_ENV
          echo 'END_OF_RELEASE_MARKDOWN' >> $GITHUB_ENV

          echo -e "Notices:\n${RELEASE_NOTICES}\n"


          ## Write to file for Play Store upload
          mkdir /tmp/whatsnew
          echo "${RELEASE_NEWS}" > /tmp/whatsnew/whatsnew-en-US
          echo "Wrote news to /tmp/whatsnew/whatsnew-en-US"

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Flutter Version Management CLI
        uses: flutter-actions/setup-fvm@v1

      - name: Install Flutter SDK
        run: fvm install

      - name: Activate Flutter SDK
        run: fvm use --skip-pub-get

      - name: Get depedencies
        run: fvm flutter pub get

      - name: Write secret files
        run: |
          echo "${{ secrets.FLUTTER_ENV_BASE64 }}" | base64 -d > ./.env
          echo "${{ secrets.GOOGLE_SERVICES_BASE64 }}" | base64 -d > ./android/app/google-services.json
          echo "${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}" | base64 -d > ./android/key.properties
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > ./android/app/keystore.jks

      - name: Build for web
        run: fvm flutter build web --dart-define=PRODUCTION_LOGGING=true
        # run: fvm flutter build web --profile --source-maps --dart-define=Dart2jsOptimization=O0 --dart-define=PRODUCTION_LOGGING=true

      - name: Create 404.html
        run: |
          cp build/web/index.html build/web/404.html

      - name: Upload web artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Build APK for Android
        run: fvm flutter build apk --dart-define=PRODUCTION_LOGGING=true

      - name: Build App Bundle for Android
        run: fvm flutter build appbundle

      - name: Rename builds
        run: |
          mv "build/app/outputs/flutter-apk/app-release.apk" "build/app/outputs/flutter-apk/SquadQuest.apk"
          mv "build/app/outputs/bundle/release/app-release.aab" "build/app/outputs/bundle/release/SquadQuest.aab"

      - name: Upload APK to release
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["build/app/outputs/flutter-apk/SquadQuest.apk", "build/app/outputs/bundle/release/SquadQuest.aab"]'

      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}'
          packageName: app.squadquest
          releaseFiles: build/app/outputs/bundle/release/SquadQuest.aab
          track: production
          whatsNewDirectory: /tmp/whatsnew

      - name: Insert new row into app_versions
        env:
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_GITHUB_RELEASE_ACTION_TOKEN: ${{ secrets.SUPABASE_GITHUB_RELEASE_ACTION_TOKEN }}
        run: |
          REQUEST_BODY=$(
              jq --null-input \
                  --arg build "${BUILD_NUMBER}" \
                  --arg version "${BUILD_NAME}" \
                  --arg news "${RELEASE_NEWS}" \
                  --arg notices "${RELEASE_NOTICES}" \
                  '{
                      build: $build,
                      version: $version,
                      news: (if $news == "" then null else $news end),
                      notices: (if $notices == "" then null else $notices end),
                      availability: ["githubAPK", "web"]
                  }'
          )
          echo "Build request body:"
          echo "${REQUEST_BODY}" | jq

          echo "Inserting new row into app_versions..."
          curl --silent \
              -X POST 'https://supabase.squadquest.app/rest/v1/app_versions' \
              -H "apikey: ${SUPABASE_ANON_KEY}" \
              -H "Authorization: Bearer ${SUPABASE_GITHUB_RELEASE_ACTION_TOKEN}" \
              -H "Content-Type: application/json" \
              -H "Prefer: return=representation" \
              -d "${REQUEST_BODY}" | jq
